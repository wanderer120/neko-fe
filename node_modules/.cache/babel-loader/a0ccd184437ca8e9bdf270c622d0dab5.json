{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/wanderer120/Documents/projects/neko/findings/nekotest/client/src/App.js\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport { _ABI, _CONTRACT_ADDRESS } from './config';\nlet accountBalance = -1;\n\nclass App extends Component {\n  componentWillMount() {\n    this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    if (!ethEnabled()) {\n      alert(\"Please install an Ethereum-compatible browser or extension like MetaMask to use this dApp!\");\n    } else {\n      const accounts = await window.web3.eth.getAccounts();\n      window.web3.eth.getBalance(accounts[0]).then(value => {\n        accountBalance = window.web3.utils.fromWei(value);\n        console.log(accountBalance);\n        this.setState({\n          balance: accountBalance\n        });\n      }); //alert(\"accountBalance:\"+accountBalance);\n\n      this.setState({\n        account: accounts[0]\n      });\n      const contract = new window.web3.eth.Contract(_ABI, _CONTRACT_ADDRESS);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '-1',\n      balance: '-1'\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hello, World!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your account: \", this.state.account]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst ethEnabled = () => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    window.ethereum.enable();\n    return true;\n  }\n\n  return false;\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/wanderer120/Documents/projects/neko/findings/nekotest/client/src/App.js"],"names":["React","Component","Web3","_ABI","_CONTRACT_ADDRESS","accountBalance","App","componentWillMount","loadBlockchainData","ethEnabled","alert","accounts","window","web3","eth","getAccounts","getBalance","then","value","utils","fromWei","console","log","setState","balance","account","contract","Contract","constructor","props","state","render","ethereum","enable"],"mappings":";;AAAA,OAAO,kCAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,WAAP;AACA,SAASC,IAAT,EAAeC,iBAAf,QAAwC,UAAxC;AAEA,IAAIC,cAAc,GAAG,CAAC,CAAtB;;AACA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAE1BM,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,kBAAL;AACD;;AAED,QAAMA,kBAAN,GAA2B;AACzB,QAAI,CAACC,UAAU,EAAf,EAAmB;AACjBC,MAAAA,KAAK,CAAC,4FAAD,CAAL;AACD,KAFD,MAGI;AACF,YAAMC,QAAQ,GAAG,MAAMC,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAgBC,WAAhB,EAAvB;AACAH,MAAAA,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAgBE,UAAhB,CAA2BL,QAAQ,CAAC,CAAD,CAAnC,EAAwCM,IAAxC,CAA8CC,KAAD,IAAS;AACpDb,QAAAA,cAAc,GAAGO,MAAM,CAACC,IAAP,CAAYM,KAAZ,CAAkBC,OAAlB,CAA0BF,KAA1B,CAAjB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYjB,cAAZ;AACA,aAAKkB,QAAL,CAAc;AAAEC,UAAAA,OAAO,EAAEnB;AAAX,SAAd;AACD,OAJD,EAFE,CAOF;;AACA,WAAKkB,QAAL,CAAc;AAAEE,QAAAA,OAAO,EAAEd,QAAQ,CAAC,CAAD;AAAnB,OAAd;AACA,YAAMe,QAAQ,GAAG,IAAId,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAgBa,QAApB,CAA6BxB,IAA7B,EAAmCC,iBAAnC,CAAjB;AACD;AACF;;AAEDwB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXL,MAAAA,OAAO,EAAE,IADE;AAEXD,MAAAA,OAAO,EAAE;AAFE,KAAb;AAID;;AAEDO,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,qCAAkB,KAAKD,KAAL,CAAWL,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAtCyB;;AAwC5B,MAAMhB,UAAU,GAAG,MAAM;AACvB,MAAIG,MAAM,CAACoB,QAAX,EAAqB;AACnBpB,IAAAA,MAAM,CAACC,IAAP,GAAc,IAAIX,IAAJ,CAASU,MAAM,CAACoB,QAAhB,CAAd;AACApB,IAAAA,MAAM,CAACoB,QAAP,CAAgBC,MAAhB;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAPD;;AASA,eAAe3B,GAAf","sourcesContent":["import 'bootstrap/dist/css/bootstrap.css';\nimport React, { Component } from 'react'\nimport Web3 from 'web3'\nimport './App.css'\nimport { _ABI, _CONTRACT_ADDRESS } from './config'\n\nlet accountBalance = -1;\nclass App extends Component {\n\n  componentWillMount() {\n    this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    if (!ethEnabled()) {\n      alert(\"Please install an Ethereum-compatible browser or extension like MetaMask to use this dApp!\");\n    }\n    else{\n      const accounts = await window.web3.eth.getAccounts()\n      window.web3.eth.getBalance(accounts[0]).then((value)=>{\n        accountBalance = window.web3.utils.fromWei(value);\n        console.log(accountBalance);\n        this.setState({ balance: accountBalance})\n      });\n      //alert(\"accountBalance:\"+accountBalance);\n      this.setState({ account: accounts[0]})\n      const contract = new window.web3.eth.Contract(_ABI, _CONTRACT_ADDRESS)\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '-1',\n      balance: '-1'\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Hello, World!</h1>\n        <p>Your account: {this.state.account}</p>\n      </div>\n    );\n  }\n}\nconst ethEnabled = () => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    window.ethereum.enable();\n    return true;\n  }\n  return false;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}