{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/wanderer120/Documents/projects/neko/findings/nekotest/client/src/App.js\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport { _ABI, _CONTRACT_ADDRESS } from './config';\nimport Button from 'react-bootstrap/Button';\nimport MainPage from './Components/MainPage';\nvar app;\n\nclass App extends Component {\n  componentWillMount() {\n    this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    if (!ethEnabled()) {\n      alert(\"Please install an Ethereum-compatible browser or extension like MetaMask to use this dApp!\");\n    } else {\n      let userDetailObj = {};\n      const accounts = await window.web3.eth.getAccounts().then(accounts => {\n        if (accounts.length === 0) {\n          console.log('MetaMask is locked');\n          this.setState({\n            isLogin: false\n          });\n        } else {\n          this.setState({\n            isLogin: true\n          });\n          userDetailObj.account = accounts[0];\n          window.web3.eth.getBalance(accounts[0]).then(value => {\n            userDetailObj.balance = window.web3.utils.fromWei(value);\n            this.setState({\n              userDetail: userDetailObj\n            });\n          });\n          userDetailObj.contract = new window.web3.eth.Contract(_ABI, _CONTRACT_ADDRESS);\n          userDetailObj.contract.methods.isUserExists(userDetailObj.account).call().then(result => {\n            console.log(result);\n            this.setState({\n              userExist: result\n            });\n          });\n        }\n      }, () => {\n        console.log(\"fail callback\");\n      });\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    app = this;\n    this.state = {\n      isLogin: false,\n      userDetail: {\n        account: -1,\n        balance: -1,\n        contract: {}\n      },\n      userExist: false\n    };\n    this.LoginToMetamask = this.LoginToMetamask.bind(this);\n    window.ethereum.on('accountsChanged', function (accounts) {\n      let userDetailObj = {};\n\n      if (accounts.length === 0) {\n        console.log('MetaMask is locked');\n        app.setState({\n          isLogin: false\n        });\n      } else {\n        app.setState({\n          isLogin: true\n        });\n        userDetailObj.account = accounts[0];\n        window.web3.eth.getBalance(accounts[0]).then(value => {\n          userDetailObj.balance = window.web3.utils.fromWei(value);\n          app.setState({\n            userDetail: userDetailObj\n          });\n        });\n        userDetailObj.contract = new window.web3.eth.Contract(_ABI, _CONTRACT_ADDRESS);\n        userDetailObj.contract.methods.isUserExists(userDetailObj.account).call().then(result => {\n          console.log(result);\n        });\n      }\n    });\n  }\n\n  render() {\n    if (this.state.isLogin) {\n      return /*#__PURE__*/_jsxDEV(MainPage, {\n        userDetail: this.state.userDetail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: this.LoginToMetamask,\n          children: \"Connect to Metamask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  LoginToMetamask() {\n    this.loadBlockchainData();\n  }\n\n}\n\nconst ethEnabled = () => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    window.ethereum.enable();\n    return true;\n  }\n\n  return false;\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/wanderer120/Documents/projects/neko/findings/nekotest/client/src/App.js"],"names":["React","Component","Web3","_ABI","_CONTRACT_ADDRESS","Button","MainPage","app","App","componentWillMount","loadBlockchainData","ethEnabled","alert","userDetailObj","accounts","window","web3","eth","getAccounts","then","length","console","log","setState","isLogin","account","getBalance","value","balance","utils","fromWei","userDetail","contract","Contract","methods","isUserExists","call","result","userExist","constructor","props","state","LoginToMetamask","bind","ethereum","on","render","enable"],"mappings":"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","sourcesContent":["import 'bootstrap/dist/css/bootstrap.css';\nimport React, { Component } from 'react'\nimport Web3 from 'web3'\nimport './App.css'\nimport { _ABI, _CONTRACT_ADDRESS } from './config'\nimport Button from 'react-bootstrap/Button'\n\nimport MainPage from './Components/MainPage'\n\nvar app;\nclass App extends Component {\n\n  componentWillMount() {\n    this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    if (!ethEnabled()) {\n      alert(\"Please install an Ethereum-compatible browser or extension like MetaMask to use this dApp!\");\n    }\n    else{\n      let userDetailObj = {};\n      const accounts = await window.web3.eth.getAccounts().then((accounts)=>{\n        if (accounts.length === 0) {\n          console.log('MetaMask is locked')\n          this.setState({isLogin:false})\n        }\n        else {\n          this.setState({isLogin:true})\n          userDetailObj.account = accounts[0]\n          window.web3.eth.getBalance(accounts[0]).then((value)=>{\n            userDetailObj.balance = window.web3.utils.fromWei(value)\n            this.setState({userDetail:userDetailObj})\n          });\n          userDetailObj.contract = new window.web3.eth.Contract(_ABI, _CONTRACT_ADDRESS)\n          userDetailObj.contract.methods.isUserExists(userDetailObj.account).call().then((result)=>{\n            console.log(result);\n            this.setState({userExist:result})\n          });\n        }\n      },()=>{\n        console.log(\"fail callback\");\n      })\n    }\n  }\n  constructor(props) {\n    super(props)\n    app = this;\n    this.state = {\n      isLogin: false,\n      userDetail: {account:-1,balance:-1,contract:{}},\n      userExist: false\n    }\n    this.LoginToMetamask = this.LoginToMetamask.bind(this);\n    window.ethereum.on('accountsChanged', function (accounts) {\n      let userDetailObj = {};\n      if (accounts.length === 0) {\n        console.log('MetaMask is locked')\n        app.setState({isLogin:false})\n      }\n      else {\n        app.setState({isLogin:true})\n        userDetailObj.account = accounts[0];\n        window.web3.eth.getBalance(accounts[0]).then((value)=>{\n          userDetailObj.balance = window.web3.utils.fromWei(value);\n          app.setState({userDetail:userDetailObj})\n        });\n        userDetailObj.contract = new window.web3.eth.Contract(_ABI, _CONTRACT_ADDRESS);\n        userDetailObj.contract.methods.isUserExists(userDetailObj.account).call().then((result)=>{\n          console.log(result);\n        });\n      }\n    });\n  }\n\n  render() {\n    if(this.state.isLogin){\n      return (\n        <MainPage userDetail={this.state.userDetail} />\n      );\n    }\n    else {\n      return (\n        <div className=\"container\">\n          <Button variant=\"primary\" onClick={this.LoginToMetamask}>Connect to Metamask</Button>{' '}\n        </div>\n      );\n    }\n  }\n\n  LoginToMetamask(){\n    this.loadBlockchainData()\n  }\n}\nconst ethEnabled = () => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    window.ethereum.enable();\n    return true;\n  }\n  return false;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}