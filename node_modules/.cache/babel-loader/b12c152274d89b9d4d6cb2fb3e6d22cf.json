{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/wanderer120/Documents/projects/neko/findings/nekotest/client/src/App.js\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport { _ABI, _CONTRACT_ADDRESS } from './config';\nimport Button from 'react-bootstrap/Button';\nimport MainPage from './View/MainPage.js';\nvar app;\n\nclass App extends Component {\n  componentWillMount() {//this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    if (!ethEnabled()) {\n      alert(\"Please install an Ethereum-compatible browser or extension like MetaMask to use this dApp!\");\n    } else {\n      const accounts = await window.web3.eth.getAccounts().then(accounts => {\n        if (accounts.length === 0) {\n          console.log('MetaMask is locked');\n          this.setState({\n            isLogin: false\n          });\n        } else {\n          this.setState({\n            isLogin: true\n          });\n          this.setState({\n            account: accounts[0]\n          });\n          window.web3.eth.getBalance(accounts[0]).then(value => {\n            this.setState({\n              balance: window.web3.utils.fromWei(value)\n            });\n          });\n        }\n      }, () => {\n        console.log(\"fail callback\");\n      });\n      const contract = new window.web3.eth.Contract(_ABI, _CONTRACT_ADDRESS);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    app = this;\n    this.state = {\n      isLogin: false,\n      account: '-1',\n      balance: '-1'\n    };\n    this.LoginToMetamask = this.LoginToMetamask.bind(this);\n    window.ethereum.on('accountsChanged', function (accounts) {\n      if (accounts.length === 0) {\n        console.log('MetaMask is locked');\n        app.setState({\n          isLogin: false\n        });\n      } else {\n        app.setState({\n          isLogin: true\n        });\n        app.setState({\n          account: accounts[0]\n        });\n        window.web3.eth.getBalance(accounts[0]).then(value => {\n          app.setState({\n            balance: window.web3.utils.fromWei(value)\n          });\n        });\n      }\n    });\n  }\n\n  render() {\n    if (this.state.isLogin) {\n      return /*#__PURE__*/_jsxDEV(MainPage, {\n        account: this.state.account,\n        balance: this.state.balance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n      /*\n      <div className=\"container\">\n        <h1>It's alive!</h1>\n        <p>Your account: {this.state.account}</p>\n        <p>Your balance: {this.state.balance} ETH</p>\n      </div>\n      */\n      ;\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: this.LoginToMetamask,\n          children: \"Connect to Metamask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  LoginToMetamask() {\n    this.loadBlockchainData();\n  }\n\n}\n\nconst ethEnabled = () => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    window.ethereum.enable();\n    return true;\n  }\n\n  return false;\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/wanderer120/Documents/projects/neko/findings/nekotest/client/src/App.js"],"names":["React","Component","Web3","_ABI","_CONTRACT_ADDRESS","Button","MainPage","app","App","componentWillMount","loadBlockchainData","ethEnabled","alert","accounts","window","web3","eth","getAccounts","then","length","console","log","setState","isLogin","account","getBalance","value","balance","utils","fromWei","contract","Contract","constructor","props","state","LoginToMetamask","bind","ethereum","on","render","enable"],"mappings":"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","sourcesContent":["import 'bootstrap/dist/css/bootstrap.css';\nimport React, { Component } from 'react'\nimport Web3 from 'web3'\nimport './App.css'\nimport { _ABI, _CONTRACT_ADDRESS } from './config'\nimport Button from 'react-bootstrap/Button'\n\nimport MainPage from './View/MainPage.js'\n\nvar app;\nclass App extends Component {\n\n  componentWillMount() {\n    //this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    if (!ethEnabled()) {\n      alert(\"Please install an Ethereum-compatible browser or extension like MetaMask to use this dApp!\");\n    }\n    else{\n      const accounts = await window.web3.eth.getAccounts().then((accounts)=>{\n        if (accounts.length === 0) {\n          console.log('MetaMask is locked')\n          this.setState({isLogin:false})\n        }\n        else {\n          this.setState({isLogin:true})\n          this.setState({ account: accounts[0]})\n          window.web3.eth.getBalance(accounts[0]).then((value)=>{\n            this.setState({ balance: window.web3.utils.fromWei(value)})\n          });\n        }\n      },()=>{\n        console.log(\"fail callback\");\n      })\n\n      const contract = new window.web3.eth.Contract(_ABI, _CONTRACT_ADDRESS)\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    app = this;\n    this.state = {\n      isLogin: false,\n      account: '-1',\n      balance: '-1'\n    }\n    this.LoginToMetamask = this.LoginToMetamask.bind(this);\n    window.ethereum.on('accountsChanged', function (accounts) {\n      if (accounts.length === 0) {\n        console.log('MetaMask is locked')\n        app.setState({isLogin:false})\n      }\n      else {\n        app.setState({isLogin:true})\n        app.setState({ account: accounts[0]})\n        window.web3.eth.getBalance(accounts[0]).then((value)=>{\n          app.setState({ balance: window.web3.utils.fromWei(value)})\n        });\n      }\n    });\n  }\n\n  render() {\n    if(this.state.isLogin){\n      return (\n        <MainPage account={this.state.account} balance={this.state.balance}/>\n        /*\n        <div className=\"container\">\n          <h1>It's alive!</h1>\n          <p>Your account: {this.state.account}</p>\n          <p>Your balance: {this.state.balance} ETH</p>\n        </div>\n        */\n      );\n    }\n    else {\n      return (\n        <div className=\"container\">\n        <Button variant=\"primary\" onClick={this.LoginToMetamask}>Connect to Metamask</Button>{' '}\n        </div>\n      );\n    }\n  }\n\n  LoginToMetamask(){\n    this.loadBlockchainData()\n  }\n}\nconst ethEnabled = () => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    window.ethereum.enable();\n    return true;\n  }\n  return false;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}